snippet new
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vi: et:ts=4:sw=4
from __future__ import absolute_import
from __future__ import with_statement

###################################################################

${0}
endsnippet

snippet main
if __name__ == '__main__':
    ${0}
endsnippet

snippet # 
###################################################################

${0}
endsnippet

snippet newtest
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vi: et:ts=4:sw=4
from __future__ import absolute_import
from __future__ import with_statement

import unittest

###################################################################

class Test${1}(unittest.TestCase):

    ${0}

if __name__ == '__main__':
    unittest.main()
endsnippet

snippet newfulltest
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vi: et:ts=4:sw=4
from __future__ import absolute_import
from __future__ import with_statement

import unittest

###################################################################

class Test${1}(unittest.TestCase):
    
    @classmethod
    def setUpClass(cls):
        pass
    
    
    @classmethod
    def tearDownClass(cls):
        pass
        
    
    def setUp(self):
        # Run prior to each test.
        pass

    
    def tearDown(self):
        # Run after each test.
        pass
    
    # assertEqual(a, b)         a == b	 
    # assertNotEqual(a, b)      a != b	 
    # assertTrue(x)             bool(x) is True	 
    # assertFalse(x)            bool(x) is False	 
    # assertIs(a, b)            a is b
    # assertIsNot(a, b)         a is not b
    # assertIsNone(x)           x is None
    # assertIsNotNone(x)        x is not None
    # assertIn(a, b)            a in b
    # assertNotIn(a, b)         a not in b
    # assertIsInstance(a, b)    isinstance(a, b)
    # assertNotIsInstance(a, b) not isinstance(a, b)
    #
    # assertRaises(exc, fun, *args, **kwds)  fun(*args, **kwds) raises exc
    # assertRaises(exc, fun, *args, **kwds)  fun(*args, **kwds) raises exc and the msg matches regex r
    #
    # assertAlmostEqual(a, b)         round(a-b, 7) == 0	 
    # assertNotAlmostEqual(a, b)      round(a-b, 7) != 0	 
    # assertGreater(a, b)             a > b
    # assertGreaterEqual(a, b)        a >= b
    # assertLess(a, b)                a < b
    # assertLessEqual(a, b)           a <= b
    # assertRegexpMatches(s, r)       r.search(s)
    # assertNotRegexpMatches(s, r)    not r.search(s)
    # assertItemsEqual(a, b)          sorted(a) == sorted(b) and works with unhashable objs
    # assertDictContainsSubset(a, b)  all the key/value pairs in a exist in b
    #
    # assertMultiLineEqual(a, b)    strings
    # assertSequenceEqual(a, b)     sequences
    # assertListEqual(a, b)         lists
    # assertTupleEqual(a, b)        tuples
    # assertSetEqual(a, b)          sets or frozensets
    # assertDictEqual(a, b)         dicts

    ${0}


if __name__ == '__main__':
    unittest.main()
endsnippet

snippet newtc

#@unittest.skipIf(sys.platform.startswith("win"), "Won't run on Windows")
#@unittest.skipUnless(sys.platform.startswith("win"), "Requires Windows")
def test_${1}(self):
    ${0}
endsnippet

